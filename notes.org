* High score for the number of doses collected                         :idea:
** Would be a cool incentive for the end game
** The players might even consider prolonging it
** While obviously carrying danger because of the loss of Will and Depressions
* Track the continuous High                                            :idea:
** think of something that would make the player want to not break the cycle
** Show at the end of the game screen
* The player can start surrounded by hunger monsters and dead           :bug:
* The player can start within an irresistible dose's reach              :bug:
* The Hunger no longer howls to attract nearby hungers                  :bug:
** I like that feature and it's disappearance is an omission
** If we do want to remove it, it should be after testing
* The screen sometimes scrolls earlier than it should                   :bug:
** I've noticed this with horizontal scrolls, but it may be vertical too?
* Carrying small doses in inventory should be possible earlier than the large ones :idea:
** Right now they're all only pickable at the highest Will
* When there's no dose in sight and you're withdrawn, point in a general direction :idea:
** But only when you have no doses and no food
** I.e. this is to stop you from being completely fucked
** Because right now in that state you just have to wander randomly and hope
* Show the anxiety counter in the UI :idea:
** This will make it clearer to figure out that you want to keep hunting the Wills
** We can start by showing will with a decimal counter
** Or a "next will" progress bar
* Distribute the doses based on a pattern                              :idea:
** First I thought just put them across some jagged lines the player can follow
** But how about doing a tree-like or better yet (since we're 2D) neuron-like structure?
** It would give some structure to the map, the centres would have interesting clusters
** And if the player ever figures it out, might be cool
* Need to keep moving while waiting on the victory counter           :design:
** Right now, the best strategy is to dance around a save spot, doing nothing
** We need to force the player to keep moving
** Some ideas:
*** Get the monsters into a frenzy and start attacking the player
*** Only count "sobriety points" when a new ground is explored
**** This is hard to discover so I'm not keen
*** Give the player a goal they can achieve only while sober
**** Say talking to a family NPC
**** Show an arrow to the NPC?
* Add a new type of dose with different effects :idea:
** it would show as a different letter
** with a different colour (red?)
** it's own tolerance
** different effect on consumption (not explosion)
*** how about shooting rays in cardinal / diagonal directions?
*** could be two versions of the "same type" just like normal/strong dose now
*** the rays would destroy everything in their path -- including walls
*** the characters would be `+` and `x` for cardinal and diagonal rays
* Add NPCs :idea:
** these could be "friends and family"
** they're seen as translucent ghosts you can't interact with when High
** but they can accompany you when sober
*** making monsters not attack you
*** going sober more slowly
*** pointing towards useful/interesting things/places?
* Items that could reduce the dose effect                              :idea:
** from strike:
#+BEGIN_QUOTE
Other ideas and dynamics that come to mind: antabus would contradict
alcohol, stims vs downers, psychedelics (and a bad trip, depending on
what you encounter while high, might lower your craving for a next
dose but hurt your peace of mind or other stats), add paranoia and
other stats, make the player's psychological and physiological
conditions more detailed and readable (feels like blundering in a
black box atm).
#+END_QUOTE
** don't need to think about this too hard for now
** just create an item called "antidose" (yep, antidote pun)
** read up on the stuff mentioned in the quote for inspiration
** but initially, just disable post-high withdrawal (and maybe switch to sober immediately)
** there are meds that ease withdrawal effects
*** so maybe you're still withdrawn, but the screen wouldn't go dark so much
*** and the fov would not reduce so much
*** and it'd take more time for you to die (or maybe you wouldn't die at all, just transition to sober)
* Spending a long time in the "normal" state can add Will :idea:
* Remove the `build` folder from the releases :bug:
** Takes up a lot of space and it's entirely unnecessary
* Adding a bad trip :idea:
** Small chance of that happening
** But would make things actually worse for the duration of the dose
** What would happen if you took another dose by then?
*** normal High but you risk overdosing yourself
* Victory condition: dose ascension :idea:
** from strike:
#+BEGIN_QUOTE
An alternate victory condition could be "Ascension". When you combine
all sorts of chemical fireworks flowing in your veins and brains just
the right way and don't die in the process, you'll unlock the secrets
of the mind and become a badass ghost! :o) Maybe there could be a
key/enabler/artifact or more steps and hints, depending on what theme
you wanna go with. Aliens might be interesting (like the mysterious
complex drug is secretly an alien tech, for instance). The game might
indicate how your body morphs funny and how you feel strange and "hear
voices" etc., pulling you in one direction or the other. I don't think
I can think of a third option. Except maybe if you wanted to take this
route and make the path to ascension more complex, add distractions
and false drugs that lure you astray and kill your brain cells, making
it more difficult or something. Perhaps dreamy entheogens versus hard
stims Â or whatnot, I dunno. // do research to get inspiration, wiki
and psychonaut websites are gonna be a goldmine, I'd say :p
#+END_QUOTE
** That's basically fantasy land so I'm not sure how I feel about this
*** I kind of like the idea because it provides an addict victory condition
*** Doesn't necessarily be a fantasy (consider the "golden shot" or whatever it's called)
*** Train your will enough so you can collect doses and then down like a 100 at a same time?
* Victory condition: stable addict :idea:
** Train yourself enough to be able to carry doses around
** Explore the world?
** Maybe find something that you wouldn't be able to otherwise
** "I've stopped smoking but I have a cigarette once a year"
* Make the doses more interesting :design:
** Right now they're kind of bland: just increase SoM
** from strike:
#+BEGIN_QUOTE
perhaps pick one really interesting (or invent a new hypothetical one)
that has useable body and mind feedback for gameplay - sky's the
limit. But a generic "something you're addicted to" is too 'meh' for a
game. Some backstory would add a lot to the experience, too.
#+END_QUOTE
* The map generation shouldn't screw you over from the beginning :bug:
* Make the beginnings easier instead of throwing everything at you all at once :idea:
** Start with a handful subset of monsters, maybe less spaced-out
** Have "easy" and "hard" areas on the map but start in an easy one
* Mouse support :idea:
* Consider using just the cardinal movement :idea:
** Diagonals are hard on the beginners
** Maybe a mouse?
* Add a tutorial or something :idea:
** Either a help doc or a tutorial or something to help the beginners
* Medication or sobriety badges :idea:
** Instead of the 12-step bullshit
** You could come visit these centres
*** they'd feed you and somehow help you to combat the addiction
*** you could get sobriety bonuses (e.g. will increase, etc.)
* Map the "must go forward and use the dose" range directly to Will? :idea:
** It could make the place more interesting -- having move around the place
** Needs glowing irresistible areas
** It would make it clearer what happens when you gain new will
* Effects for gaining/losing will :ui:
** graphics (render it as a bar)
** consider displaying the partial will
*** say you have `Will = 5` but you've also killed three Anxieties, so your Will is more like `5.3`
*** maybe display the equivalent of the `.3` portion as a lighter bit on the Will progress bar
*** and as it gets closer to `1.0` its colour would get closer and closer to the "real Will colour"
** sound
* Longer-term developments of the addiction/state of mind            :design:
** like what can you do if you put off getting doses for long
** what happens when your tolerance builds up
** ideally, I'd like the gameplay to change substantially as you progress based on how you play
** also ideally with like different "gameplay curves" -- but all systems driven
* Get a small amount of "food effect" (SoM points when not high) on killing a Hunger :idea:
** Could encourage players to seek them out
** But it's obviously dangerous
** And it may cost you food if you overestimate (which fits fighting hunger)
* Ideas about the main scope / goals of the game :design:
Finding out food and collecting it is good. More items to collect? Maybe stuff
that changes the gameplay in some way? Like the items in spelunky.

We should have some endgoal. Thematically, I can only thinking of curing the
addiction, but that seems like something of an optional difficult goal (e.g.
Hell in Spelunky). And anyway, how are we going to deal with this? Some items to
find/pick up? I was thinking something like the 12 step program but that isn't
bullshit.

Maybe finding people and getting their forgiveness/acceptance? And/or more
generally: dealing with your past.

Maybe in terms of the non-curing way... I don't know. What does an addict want?
Read through the wiki and some real stories? Despite the Marla Daniels quote,
I'd like there to be a way to complete the game. Something that keeps you exploring.

Or let's make it a survival/exploration sim. That would put a lot of the game
into the worldgen (and systems) but it seems like it could fit this. Consider
e.g. removing almost all monsters from an area, see how it plays.

Anyway, let's start with making the world bigger then one screen without actually
changing anything else at the moment. And then play it for a while and see what happens.

* Random chance that explosion destroys a wall, too?
** I think this is superseded by the horizontal/diagonal ray doses
* Ghost-like NPC becoming corporeal :idea:
** When being High, the player would see these ghost NPCs moving through the world
** When being sober, they'd become more and more corporeal
** Could point the player towards interesting places/end-game conditions, etc.
* Depression only moves by 2 squares when following the player :idea:
** When idle, it would only have 1 action point
** This ties into a more general idea of idle monsters and more complex AI
* Monsters that can modify the environment :idea:
** unblock passages
** block passages
** teleport the player?
* Gameplay beyond the first screen
** We need a greater pressure for exploration and leaving the area.
*** In my current playthroughs I just never care enough to leave.
*** consider tweaking the intoxication gain and drop to create stronger pressure
** Add different worlds the player can go to when leaving the map
*** this could either be completely random
*** or there may be a fixed or semi-fixed sequence (e.g. 2 tree worlds, than two other worlds, then three different worlds, etc.)
*** Some notes on different world generation:
http://gamedev.stackexchange.com/questions/31241/random-map-generation/31245#31245
** consider restricting the possible ways to leave the map
** Split a large map into sections generaded from the initial seed and their positions from center
*** My (probably fast) ad-hoc concoction:
#+BEGIN_SRC
fn position_based_seed(initial_seed: u32, x: i32, y: i32) -> u32 {
    let high = (x as u16) as u32;
    let low = (y as u16) as u32;
    let encoded_pos = high << 16 | low;
    initial_seed ^ encoded_pos
}
#+END_SRC
**** fast but produces low values for low inputs
*** Better: just feed the inputs through a hash
*** Maybe use the integer hash function by Thomas Wang
*** http://web.archive.org/web/20071223173210/http://www.concentric.net/~Ttwang/tech/inthash.htm
* Limited map size that the player has to explore [map alternative]
** spanning multiple screens
** but not infinite
** we'd have some sort of goal to find/accomplish there
** that would simplify our entity handling and mapgen
** The screen would be a view into that map
*** still need to figure out how to move inbetween screens
* More effects on High :idea:
** monsters get weaker (Dempression moving by one step per turn)
** dynamic / changing environment?
* Idle monsters select more distant destinations :idea:
** This should make it seem more realistic
** No longer just moving randomly back and forth
* improve level generator not to create blocked entities
** Actually, with the wall-destroying ray-based doses, we can just keep it in
** The player would look for means of destroying the wall if it had food/dose/anxiety in
* Don't allow suicide (if there's a way to avoid it) :ui:
** e.g. fatfingering the arrow when the Depression is near
* save & exit/load game :ui:
** see how nethack 4 does it:
** https://www.reddit.com/r/roguelikedev/comments/3jk3xm/faq_friday_20_saving/
** could we use something similar?
* Display the player's explored area on death :ui:
* Pure terminal renderer :ui:
** We've already added a PoC using Rustbox
** Alternative library: Termion
*** http://ticki.github.io/blog/making-terminal-applications-in-rust-with-termion/
** TODO Refresh the screen on restart
** TODO Refresh the screen on motion
** TODO Add colours
** TODO Make the engines switchable (instead of running side by side)
** TODO Handle debug messages
*** Write them to log or something?
*** Or maybe just ignore that issue once the terminal is an optional thing
* Fade out Shadows & Voices when dying after attack :ui:
** fade to Color{r: 0, g: 0, b: 0} in 400ms
* Different screen fadeout colours on various player deaths :ui:
** RED when killed by a monster
** BLACK when died of exaustion
** WHITE (slow fade, plus glitches) when overdosed
* Doses should show a glowing animation :ui:
** i.e. moving between two corolurs
* Better display the movement of D monsters :ui:
** they're moving too fast currently (FPS dependent)
** we should show a path trail
** and also slow them down (visually -- so like they move every say 200ms, not every tick)
* Smooth-out animations for the fade-out when growing Withdrawn :ui:
** right now, they are discrete: from fade 50 to 45 in one frame
** better make it a fade animation of say 50ms or so
* Change the rate of the `High` animation based on intoxication :ui:
** (very high: fast-paced, should slow down on the way to sobriety)
* Better effects on player's death :ui:
** Fade out to red/black completely
** Uncover the entire map (with a reverse fade)
*** with full colours
*** showing player's corpse
* Make the graphics on Overdose death glitchy :ui:
* Better radious / FoV calculation :idea:
Instead of looking at the points' coordinates, look at the actual (pixel) space
each tile represents. The tiles are not points but squares with an area. This
should provide a visually better result (but will be harder to compute).
* Pick a good colour palette :ui:
** https://personal.sron.nl/~pault/
** http://paletton.com/
* Add the Marla Daniels quote :ui:
** When the game is launched and there aren't any saves, it should just jump into the play
*** (that was the genius of Braid)
*** (we can use the unexplored area to show help/hints)
** Any other time, we'll show the menu with the quote & the load-game option
** Possibly, we may show it during player's death, if it makes sense
* Effects on hit/death :ui:
** colour fade (or something) on stun, removed will, death, etc.
** sound
* Change player's colour on stunned/panicked :ui:
* Make sure we're accessible to colour blind people :ui:
* Maybe have a notion of a Timer struct? :code:
** first pass just set the time and drop to zero.
** no need to store (maximum, elapsed) Durations then
* The "High" animation just kills the framerate on uncovered screen :code:
* Use a config file :code:
** The game's configuration will be portable and relatively easy to modify
** We could use libtcod's config
*** not portable if we ever switch to other backengs (like glium)
*** http://doryen.eptalys.net/data/libtcod/doc/1.5.1/html2/parser_run.html?c=true
** Probably something like TOML instead
*** Has a solid Rust implementation (because Cargo)
*** Supports comments
*** Fairly easy to read & edit
*** Can we update it while preserving comments?
** Examples:
*** font path
*** font size
*** fullscreen (yes/no)
*** key bindings
*** colour-blind mode (yes/no)
*** location to the replays
*** location to the saved games?
* Archive                                                           :ARCHIVE:
** DONE Taking a dose must always save from Depression
CLOSED: [2016-10-07 Fri 21:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-07 Fri 21:25
:END:
** DONE Eating food must always save from Derpession
CLOSED: [2016-10-07 Fri 21:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-07 Fri 21:25
:END:
** DONE Background around a dose should glow in the Irresistible radius
CLOSED: [2016-10-07 Fri 22:18]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-07 Fri 22:18
:END:
** DONE Remove the duplicate irresistible radius formula calculation
CLOSED: [2016-10-08 Sat 13:10]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-08 Sat 13:10
:END:
** DONE Remove the duplicate coordinates projection calculation in irresistible dose
CLOSED: [2016-10-08 Sat 13:22]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-08 Sat 13:22
:END:
** DONE CRASH when going somewhere left
CLOSED: [2016-10-08 Sat 14:29]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-08 Sat 14:29
:END:
cargo run -- replay-2016-10-08T13\:20\:21.431
** DONE Finer indicator of the state of mind
CLOSED: [2016-12-05 Mon 22:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-05 Mon 22:25
:END:
*** let's split the three states (high, sober, withdrawal)
*** have a progress bar for each
*** you replenish high by doses, when it drops to zero -> withdrawal
*** you replenish sober & withdrawal with food
*** normal going to zero -> withdrawal
*** withdrawal going to zero -> death
*** withdrawal going up -> sober
** DONE UI: make the sidebar a different colour so it's visually distinct
CLOSED: [2016-12-05 Mon 23:32]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-05 Mon 23:32
:END:
** DONE BUG: Crash on overdose
CLOSED: [2016-12-06 Tue 00:27]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-06 Tue 00:27
:END:
** DONE BUG: The screen doesn't move when going to the right edge
CLOSED: [2016-12-08 Thu 20:31]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-08 Thu 20:31
:END:
*** And but the world there still exist, so a Depression can kill you without you seeing it coming
** DONE The FOV circle should never extend beyond the edge of the screen
CLOSED: [2016-12-08 Thu 20:31]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-08 Thu 20:32
:END:
*** I.e. the player should always be able to see the full extent of their field of view
*** Which means we should trigger the screen scroll before that happens
*** And to make things predictable, let's scroll precisely when the field of view would be outside
*** That way the player can learn & anticipate it instead of being surprised
** DONE A high-enough Will will let you pick up & carry doses in your inventory
CLOSED: [2016-12-09 Fri 00:20]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-09 Fri 00:20
:END:
*** DONE Differentiate between normal and strong doses
CLOSED: [2016-12-08 Thu 23:53]
*** DONE But if it drops below that limit and you're carrying, you'll automatically consume a dose every turn, which will likely kill you.
CLOSED: [2016-12-09 Fri 00:20]
** DONE Victory condition: cure addiction
CLOSED: [2016-12-09 Fri 21:53]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-09 Fri 21:53
:END:
*** Do *something* that will cure the addiction somehow
*** Read up on curing addiction and see if there's any inspication
*** how about reaching max will & spending certain amount of time being sober?
**** when you reach max Will, we'll show a progress bar towards victory
**** going to Withdrawal or High will reset the bar
** DONE BUG: Large doses have no irresistible area
CLOSED: [2016-12-11 Sun 17:36]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-11 Sun 17:37
:END:
** Reduce the max Will to 5
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-11 Sun 21:18
:END:
*** We'll have to re-balance everything ultimately anyway
*** But given the content in the game right now, 5 is much more likely to get you anywhere
** DONE Slightly increase the normal dose frequency?
CLOSED: [2016-12-11 Sun 21:19]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-11 Sun 21:19
:END:
*** We'll have to re-balance everything ultimately anyway
*** But maybe having more doses would be a nice way to prevent early deaths and show tolerance increase
** DONE tcod-rs wrong asserts in console::root::rect
CLOSED: [2016-12-12 Mon 23:04]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-12 Mon 23:04
:END:
*** Unable to fill the last column and row because of an incorrect assert
*** Log a github issue
*** DONE Fix upstream
CLOSED: [2016-12-12 Mon 23:04]
*** DONE Remove the dimensions - (1, 1) workaround in engine.rs
CLOSED: [2016-12-12 Mon 23:04]
** DONE tcod-rs missing get_default_background color:
CLOSED: [2016-12-12 Mon 23:04]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-12 Mon 23:04
:END:
*** Log a github issue
*** DONE Fix upstream
CLOSED: [2016-12-12 Mon 23:04]
*** DONE Remove the tcod_sys unsafe workaround in engine.rs
CLOSED: [2016-12-12 Mon 23:04]
** DONE BUG: Hunger is harmless while High
CLOSED: [2016-12-13 Tue 16:34]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-13 Tue 16:34
:END:
** DONE Code improvement: helper functions to RangedInt
CLOSED: [2016-12-13 Tue 19:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-13 Tue 19:01
:END:
*** is_max(&self) -> bool
*** set_to_min(&mut self)
*** set_to_max(&mut self) -- are we actually using this one??
** DONE End-goal
CLOSED: [2016-12-14 Wed 13:48]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-14 Wed 13:48
:END:
*** We've implemented a victory condition now and have a few more fleshed out -- closing this
*** Play until you die is fun while testing but we should have something to achieve
*** Something along the lines of 12 steps?
**** though I'm not fond of those
**** but like some discrete steps/things to find
**** multiple endings? Fixing your addiction being the hardest one.
** Overdose doesn't seem to be having any effect                       :bug:
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-30 Fri 19:00
:END:
*** When debugging, `player.alive()` is clearly false on overdose
*** But the GUI nor the game seem to pick up on it
** DONE Handle the monsters issue                                     :code:
CLOSED: [2017-01-06 Fri 22:24]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-06 Fri 22:24
:END:
Before the new World order, all the monsters were held in a single Vec
that was separate from the level, but the Level had a map of Position
-> Monster ID.

That way, we could mutably iterate over the monsters for their AI
routines while being able to look at the surrounding area including
monsters that would block movement/pathfinding, etc.

Right now, the monsters are stored within each World Chunk though.

That means to iterate over the monsters, we need to borrow the whole
World mutably, which precludes looking at the level or surrounding
chunks.

Requirement:

1. A monster sees the player nearby in another chunk
2. It finds a path (not trampling over other monsters) towards the player
3. It walks the path step by step
4. It hits the player
5. After the attack, it disappears


Rough code outline:

For each monster visible area + 10 tiles:
    - run monster AI:
      - check distance to player
      - howl
      - find path towards the player
    - do the action AI decided (walk, attack, wait)
      (needs to happen before we process the next monster)
      (may involve moving to another chunk)

- We want to chunkify the monsters and items and everything else, too


let monster_positions = world.monster_positions_within_area(left_top - 10, bottom_right + 10).collect();
for pos in monster_positions {
    let (ai, action) = {
        let monster = world.monster_on_pos(pos).clone();  // NOTE: this frees the world borrow
        monster.act(player_pos, world, rng)  // NOTE: this is read-only action so the clone is all right
    };

    // TODO: assign the AI state here!
    // TODO: process the action here!
}


Potential solutions:

1. Iterate internally, process monsters with a callback

We do this for the rendering currently.

2. Process monsters immutably, return a list of actions to be performed later.

This is the general idea in gamedev, but would the fact that the world
needs to be mutable interfere here?

Also, one monster's movement can block another one following it. So we
should probably process the monsters one by one.

3. Analogous to what we do now: keep monsters separately, update the
   world when their position changes

This will require making the Monsters vector availeble to World for
writing or for the chunks to be created explicitly (so we can add the
newly-generated monsters to the main Vec).
** DONE The Depression only moves by one space                         :bug:
CLOSED: [2017-01-06 Fri 22:43]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-06 Fri 22:43
:END:
** DONE The intoxication animation is no longer visible                :bug:
CLOSED: [2017-01-07 Sat 23:16]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-07 Sat 23:16
:END:
** DONE The initial player's area is no longer safer + food and doses  :bug:
CLOSED: [2017-01-09 Mon 19:58]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-09 Mon 19:58
:END:
** DONE CRASH                                                          :bug:
CLOSED: [2017-01-09 Mon 20:15]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-09 Mon 20:15
:END:
*** cargo run -- replays/replay-2017-01-09T20-08-08.261
*** 'Monster should exist on this position'
** DONE Make the map "infinitely large"                          :code:idea:
CLOSED: [2017-01-12 Thu 11:20]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-12 Thu 11:20
:END:
*** We have an artificial limit on the map size now
*** Basically because of performance issues
*** I've frequently bumped into the end of the map
*** So let's fix the performance and make the map big enough size
** DONE Intoxication animation should not be visible on death          :bug:
CLOSED: [2017-01-12 Thu 17:28]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-12 Thu 17:29
:END:
** DONE Add vi-keys                                                :feature:
CLOSED: [2017-01-17 Tue 00:01]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-17 Tue 00:01
:END:
*** h/j/k/l mean left/down/up/right
*** y/u mean top-left/top-right
*** n/m mean bottom-left/bottom-right
** DONE The game hangs in some circumstances for some reason           :bug:
CLOSED: [2017-01-19 Thu 21:57]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-19 Thu 21:57
:END:
*** replay: BUG-hang.txt
*** not sure why yet, but when it runs, it needs to be `kill -9`d
*** When the path to the target is blocked, the algorithm tries to explore the entire world.
*** Fixed by setting an upper limit to the amount of calculations it does.
** DONE Add fullscreen on pressing Alt + Enter                     :ui:code:
CLOSED: [2017-01-28 So 15:55]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-28 So 15:55
:END:
*** We used to have it but had to disable it during the multiple backends work
*** How do we set it? It's not a draw call per se
*** Maybe have another vec for "engine commands"? What else would we do there though?
** DONE The colours in the glium backend look washed compared to tcod/piston :bug:
CLOSED: [2017-02-01 St 08:46]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-01 St 08:46
:END:
** DONE Fade and Rectangle are not implemented for the glium backend   :bug:
CLOSED: [2017-02-01 St 21:02]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-01 St 21:02
:END:
** DONE Compile the rendering backends conditionally                  :code:
CLOSED: [2017-02-02 Ät 18:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-02 Ät 18:41
:END:
*** Use cargo features to select which backends (tcod, rustbox, glium, piston) to even compile
*** Would make things easier for clone/cargo run and distribution
*** Glium is going to be the default
*** In the end, I'll probably ditch everything else, but it'll be useful for comparison for now
** DONE The glium backend blends dots (empty space) with whatever else is there :bug:
CLOSED: [2017-02-03 PÃ¡ 16:30]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-03 PÃ¡ 16:30
:END:
** DONE The glium backend doesn't pass FPS to the update function      :bug:
CLOSED: [2017-02-04 So 18:18]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-04 So 18:19
:END:
** DONE The SoM bar is no longer visible                               :bug:
CLOSED: [2017-02-04 So 18:54]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-04 So 18:54
:END:
*** Did we miss that with the latest reordering?
** DONE The explosion animation shows lower area than it actually has  :bug:
CLOSED: [2017-02-04 So 20:11]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-04 So 20:11
:END:
** DONE Improve the statistics we gather                              :code:
CLOSED: [2017-02-05 Ne 16:20]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-05 Ne 16:20
:END:
*** DONE option to replay at full speed (so we don't get the idle stats)
CLOSED: [2017-02-05 Ne 16:20]
*** DONE calculate & display mean and average durations
CLOSED: [2017-02-05 Ne 15:26]
*** DONE keep track of wider variety of the worst time offenders
CLOSED: [2017-02-05 Ne 15:26]
** DONE Replays are sometimes broken                                   :bug:
CLOSED: [2017-02-06 Po 21:12]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-06 Po 21:12
:END:
*** I don't know why but sometimes the replay functionality is broken
*** so the playback behaves differently from the original play
** DONE The monster's path is recalculated every turn                  :bug:
CLOSED: [2017-02-07 Ãt 19:39]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-07 Ãt 19:39
:END:
*** With the path visualisation, it's clearly visible now
*** Every turn, the monster choses a random path and recalculates
*** Thus, making their movement basically equally random as before only much slower ffs
** DONE Depression sometimes doesn't follow the player                 :bug:
CLOSED: [2017-02-07 Ãt 20:29]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-07 Ãt 20:29
:END:
*** Sometimes I see it (and it should see me) and it just stands there
*** I'm guessing it's something to do with the world chunks
**** Could be pathfinding, too but I don't remember it being a problem before the chunks
*** Actually, it looks like it's just the depression moving there and back
*** And we see it because the visibility limit can be greater
*** So really, the monsters should all just set a more distant target and follow it
*** Instead of moving randomly
