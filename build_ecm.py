from __future__ import print_function

import re
import sys


def delimiter(component_statement):
    if component_statement[-1] != '}':
        return ';'
    else:
        return ''

def component_name(component_statement):
    m = re.match(r'\w+\s+(\w+)', component_statement)
    if not m:
        print("Invalid component statement: '%s'" % component_statement)
        exit(1)
    return m.group(1)

def to_snake_case(camel_case_text):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', camel_case_text)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

entity_template = r'''
struct Entity {
%s
}
impl Entity {
    fn new() -> Entity {
        Entity{
%s
        }
    }
}
'''

component_manager_template = r'''
pub struct ComponentManager {
    entities: ~[Entity],
}

impl ComponentManager {
    pub fn new() -> ComponentManager {
        ComponentManager{entities: ~[]}
    }

    pub fn new_entity(&mut self) -> int {
        self.entities.push(Entity::new());
        (self.entities.len() - 1) as int
    }

    // Autogenerated `has_component` methods:
    %s

    // Autogenerated `get_component` methods:
    %s

    // Autogenerated `set component` methods:
    %s
}
'''

has_component_template = r'''
    pub fn has_%s(&self, id: int) -> bool {
        self.entities[id].%s.is_some()
    }
'''

get_component_template = r'''
    pub fn get_%s(&self, id: int) -> %s {
        self.entities[id].%s.unwrap()
    }
'''

set_component_template = r'''
    pub fn set_%s(&self, id: int, component: %s) {
        self.entities[id].%s = Some(component);
    }
'''

if __name__ == '__main__':
    if not len(sys.argv) == 2:
        print("You must pass exactly one argument")
        exit(1)

    input_path = sys.argv[1]
    with open(input_path, 'r') as f:
        component_lines = f.readlines()
    component_statements = [l.strip() for l in component_lines]
    components = [component_name(s) for s in component_statements]

    # Define the components structs
    for stat in component_statements:
        if stat[-6:] == '//noeq':
            stat = stat[:-6]
        else:
            print("#[deriving(Eq)]")
        print('pub', stat + delimiter(stat))
        print()  # empty line for readability

    # Define the entity
    print(entity_template % (
        '\n'.join(["%s: Option<%s>," % (to_snake_case(c), c) for c in components]),
        '\n'.join(["%s: None," % to_snake_case(c) for c in components]),
    ))

    has_component_methods = [
        has_component_template % (to_snake_case(c), to_snake_case(c))
        for c in components]

    get_component_methods = [
        get_component_template % (to_snake_case(c), c, to_snake_case(c))
        for c in components]

    set_component_methods = [
        set_component_template % (to_snake_case(c), c, to_snake_case(c))
        for c in components]

    print(component_manager_template % (
        ''.join(has_component_methods),
        ''.join(get_component_methods),
        ''.join(set_component_methods),
    ))
