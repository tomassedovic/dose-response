* Panic doesn't bump into monsters (because they're "solid")
  options:
  - just pick a random location (can bump into the wall)
  - pick a non-wall location (either empty or with a monster on it)
* Add a "hail mary pass" (something that could save you out of a tough spot --
  but not reliably and can be used only rarely)
* graphical effect of high/withdrawn
  - use tcod::console_set_fade for low (instead of changing the blitting fade
    value)
  - though that would fade the GUI as well...
* background glow for the irresistible area around a dose
* bonuses on superhigh
  - see entities on som >= 98
  - uncover the entire map on som == 99
* BUG: player's corpse can be hidden by a monster on death
* If the attacking entity can't find a path, it shouldn't just wait. Make it
  move in a random direction instead.
* Don't remove an entity in `kill_entity` on fadeout (see TODO)
* Add proper keycodes/enums
* Add generic is_key_pressed function
* Split utils into individual files
* Split systems into individual files
* improve level generator not to create blocked entities
* consider restricting the possible ways to leave the map
* add different levels
* Add the Marla Daniels quote (maybe when you die instead of when you start?)

* BUG: the game is a bit jerky sometimes
  - doesn't seem to be a (purely) AI thing. Even when we replaced AI for a
  random destination the problem persisted.
  - when we set AI to just always wait, the hangs were still occasionally there.
  They could have been rarer, but they also just may have been harder to notice
  (because the only thing moving was the player)
* wrap tcod::console_t if feasible
* write a generic system interface so we can simplify the `update` function.
* write a defsystem macro that handles the system boilerplate?
* make sure it's compatible with the colour blind
* particle effects on hit/death
* animate player state changes (added/removed will, got stunned, etc.)
* change player's colour on stunned/panicked
* save&exit/load game
* don't cover the map with the bottom status bar
* uncover the entire map on death
* save the map state on death/exit in the replay log so we can verify the replay
pass produced the same result.


* play with integrating different scripting languages:
  - guile
  - racket
  - lua
  - squirrel
  - javascript
  (how hard to integrate with rust? how calling functions per entity from rust?
  how performant running the game loop?)



Notes on tcod:

Fade the entire screen in/out of a colour:
     tcod::console_set_fade(fade: u8, tcod::Color)
     (`fade` is <0, 255>, `Color` is the colour to fade from/to)

(great on death, etc.)


The tcod background flags are confusing and at least in my experiments not
    particularly functional. Just use:

    `tcod::console_put_char_ex` which lets you directly specify both foreground
    and background colours and dosen't use the background flags at all.

There doesn't seem to be a way to mix two cells together, i.e. have a proper
disappearing fade. To do that, we'd probably have to invoke some SDL, or just
switch away from TCOD. Seems to be a limitation of the library. Or as a
kinda-solution, don't use dots for background walkable tiles and instead use a
coloured spaces or something.

I kinda like dots, though. They work better at figuring the distances --
especially wrt diagonals.
